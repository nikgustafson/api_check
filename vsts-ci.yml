jobs:
  - job: 'RunTestsPROD'
    continueOnError: True
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.6'
        architecture: 'x64'
    - task: DownloadSecureFile@1
      inputs:
        secureFile:  'panoptesConfig'
  #  - script: . setup.sh
    - script: pip install -r requirements.txt
      displayName: 'Install Requirements'
    - script: |
        pytest panoptes -m smoke --ENV=prod --log-file $SYSTEM_ARTIFACTSDIRECTORY/hello.log --junitxml="TEST-prod-smoke.xml"
      displayName: 'Test with pytest'
  - job: 'RunTestsQA'
    continueOnError: True
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.6'
        architecture: 'x64'
    - task: DownloadSecureFile@1
      inputs:
        secureFile:  'panoptesConfig'
  #  - script: . setup.sh
    - script: pip install -r requirements.txt
      displayName: 'Install Requirements'
    - script: pytest panoptes -m smoke --ENV=qa --log-file $SYSTEM_ARTIFACTSDIRECTORY/hello-qa.log --junitxml= $SYSTEM_ARTIFACTSDIRECTORY/TEST-qa-smoke.xml
      displayName: 'Test with pytest'
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current' # Options: current, specific
        #project: # Required when buildType == Specific
        #pipeline: # Required when buildType == Specific
        #specificBuildWithTriggering: false # Optional
        #buildVersionToDownload: 'latest' # Required when buildType == Specific# Options: latest, latestFromBranch, specific
        #branchName: 'refs/heads/master' # Required when buildType == Specific && BuildVersionToDownload == LatestFromBranch
        #buildId: # Required when buildType == Specific && BuildVersionToDownload == Specific
        #tags: # Optional
        #downloadType: 'single' # Options: single, specific
        #artifactName: # Required when downloadType == Single
        itemPattern: '**' # Optional
        downloadPath: '$(System.ArtifactsDirectory)' 
        #parallelizationLimit: '8' # Optional
  - job: UploadResults
    dependsOn: 
      - RunTestsQA
      - RunTestsPROD
    steps:
    - script: echo hello from the publish tests job  
        # PUBLISH JUNIT RESULTS
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit
        testResultsFiles: '**/TEST-*.xml' 
        searchFolder: '$SYSTEM_ARTIFACTSDIRECTORY' # Optional
        mergeTestResults: false # Optional
        testRunTitle: 'API_CHECK QA'
        #buildPlatform: # Optional
        #buildConfiguration: # Optional
        publishRunAttachments: true # Optional




