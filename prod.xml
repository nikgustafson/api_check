<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="4" name="pytest" skips="46" tests="119" time="332.145"><testcase classname="test_base" file="test_base.py" line="22" name="test_fixtures_for_options" time="0.9873256683349609"></testcase><testcase classname="test_base" file="test_base.py" line="27" name="test_configData" time="0.018021345138549805"></testcase><testcase classname="test_base" file="test_base.py" line="33" name="test_api_env_vars" time="0.9119863510131836"></testcase><testcase classname="test_base" file="test_base.py" line="72" name="test_sessionfixture" time="0.6549594402313232"></testcase><testcase classname="test_base" file="test_base.py" line="80" name="test_blns[&quot;`&apos;&gt;&lt;script&gt;\\x09javascript:alert(1)&lt;/script&gt;-buyer]" time="0.10893559455871582"></testcase><testcase classname="test_base" file="test_base.py" line="80" name="test_blns[&quot;`&apos;&gt;&lt;script&gt;\\x09javascript:alert(1)&lt;/script&gt;-anon]" time="0.621971607208252"></testcase><testcase classname="test_base" file="test_base.py" line="80" name="test_blns[&lt;img \\x00src=x onerror=&quot;javascript:alert(1)&quot;&gt;-buyer]" time="0.07870697975158691"></testcase><testcase classname="test_base" file="test_base.py" line="80" name="test_blns[&lt;img \\x00src=x onerror=&quot;javascript:alert(1)&quot;&gt;-anon]" time="0.0891718864440918"></testcase><testcase classname="test_base" file="test_base.py" line="80" name="test_blns[&lt;img src\\x47=x onerror=&quot;javascript:alert(1)&quot;&gt;-buyer]" time="0.07933735847473145"></testcase><testcase classname="test_base" file="test_base.py" line="80" name="test_blns[&lt;img src\\x47=x onerror=&quot;javascript:alert(1)&quot;&gt;-anon]" time="0.07357478141784668"></testcase><testcase classname="test_base" file="test_base.py" line="80" name="test_blns[\U0001d413\U0001d421\U0001d41e \U0001d42a\U0001d42e\U0001d422\U0001d41c\U0001d424 \U0001d41b\U0001d42b\U0001d428\U0001d430\U0001d427 \U0001d41f\U0001d428\U0001d431 \U0001d423\U0001d42e\U0001d426\U0001d429\U0001d42c \U0001d428\U0001d42f\U0001d41e\U0001d42b \U0001d42d\U0001d421\U0001d41e \U0001d425\U0001d41a\U0001d433\U0001d432 \U0001d41d\U0001d428\U0001d420-buyer]" time="0.10961174964904785"></testcase><testcase classname="test_base" file="test_base.py" line="80" name="test_blns[\U0001d413\U0001d421\U0001d41e \U0001d42a\U0001d42e\U0001d422\U0001d41c\U0001d424 \U0001d41b\U0001d42b\U0001d428\U0001d430\U0001d427 \U0001d41f\U0001d428\U0001d431 \U0001d423\U0001d42e\U0001d426\U0001d429\U0001d42c \U0001d428\U0001d42f\U0001d41e\U0001d42b \U0001d42d\U0001d421\U0001d41e \U0001d425\U0001d41a\U0001d433\U0001d432 \U0001d41d\U0001d428\U0001d420-anon]" time="0.09736227989196777"></testcase><testcase classname="test_base" file="test_base.py" line="80" name="test_blns[\uff9f\uff65\u273f\u30fe\u2572(\uff61\u25d5\u203f\u25d5\uff61)\u2571\u273f\uff65\uff9f-buyer]" time="0.10717582702636719"></testcase><testcase classname="test_base" file="test_base.py" line="80" name="test_blns[\uff9f\uff65\u273f\u30fe\u2572(\uff61\u25d5\u203f\u25d5\uff61)\u2571\u273f\uff65\uff9f-anon]" time="0.07950520515441895"></testcase><testcase classname="test_base" file="test_base.py" line="80" name="test_blns[&lt;IMG SRC=&quot;javascript:alert(&apos;XSS&apos;)&quot;-buyer]" time="0.07277250289916992"></testcase><testcase classname="test_base" file="test_base.py" line="80" name="test_blns[&lt;IMG SRC=&quot;javascript:alert(&apos;XSS&apos;)&quot;-anon]" time="0.07680177688598633"></testcase><testcase classname="test_base" file="test_base.py" line="80" name="test_blns[\u05d1\u05b0\u05bc\u05e8\u05b5\u05d0\u05e9\u05b4\u05c1\u05d9\u05ea, \u05d1\u05b8\u05bc\u05e8\u05b8\u05d0 \u05d0\u05b1\u05dc\u05b9\u05d4\u05b4\u05d9\u05dd, \u05d0\u05b5\u05ea \u05d4\u05b7\u05e9\u05b8\u05bc\u05c1\u05de\u05b7\u05d9\u05b4\u05dd, \u05d5\u05b0\u05d0\u05b5\u05ea \u05d4\u05b8\u05d0\u05b8\u05e8\u05b6\u05e5-buyer]" time="0.12123608589172363"></testcase><testcase classname="test_base" file="test_base.py" line="80" name="test_blns[\u05d1\u05b0\u05bc\u05e8\u05b5\u05d0\u05e9\u05b4\u05c1\u05d9\u05ea, \u05d1\u05b8\u05bc\u05e8\u05b8\u05d0 \u05d0\u05b1\u05dc\u05b9\u05d4\u05b4\u05d9\u05dd, \u05d0\u05b5\u05ea \u05d4\u05b7\u05e9\u05b8\u05bc\u05c1\u05de\u05b7\u05d9\u05b4\u05dd, \u05d5\u05b0\u05d0\u05b5\u05ea \u05d4\u05b8\u05d0\u05b8\u05e8\u05b6\u05e5-anon]" time="0.07804107666015625"></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[\u1e70\u033a\u033a\u0315o\u035e \u0337i\u0332\u032c\u0347\u032a\u0359n\u031d\u0317\u0355v\u031f\u031c\u0318\u0326\u035fo\u0336\u0319\u0330\u0320k\xe8\u035a\u032e\u033a\u032a\u0339\u0331\u0324 \u0316t\u031d\u0355\u0333\u0323\u033b\u032a\u035eh\u033c\u0353\u0332\u0326\u0333\u0318\u0332e\u0347\u0323\u0330\u0326\u032c\u034e \u0322\u033c\u033b\u0331\u0318h\u035a\u034e\u0359\u031c\u0323\u0332\u0345i\u0326\u0332\u0323\u0330\u0324v\u033b\u034de\u033a\u032d\u0333\u032a\u0330-m\u0322i\u0345n\u0316\u033a\u031e\u0332\u032f\u0330d\u0335\u033c\u031f\u0359\u0329\u033c\u0318\u0333 \u031e\u0325\u0331\u0333\u032dr\u031b\u0317\u0318e\u0359p\u0360r\u033c\u031e\u033b\u032d\u0317e\u033a\u0320\u0323\u035fs\u0318\u0347\u0333\u034d\u031d\u0349e\u0349\u0325\u032f\u031e\u0332\u035a\u032c\u035c\u01f9\u032c\u034e\u034e\u031f\u0316\u0347\u0324t\u034d\u032c\u0324\u0353\u033c\u032d\u0358\u0345i\u032a\u0331n\u0360g\u0334\u0349 \u034f\u0349\u0345c\u032c\u031fh\u0361a\u032b\u033b\u032f\u0358o\u032b\u031f\u0316\u034d\u0319\u031d\u0349s\u0317\u0326\u0332.\u0328\u0339\u0348\u0323]" time="0.002017498016357422"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x05A01290&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[\u1e70\u033a\u033a\u0315o\u035e \u0337i\u0332\u032c\u0347\u032a\u0359n\u031d\u0317\u0355v\u031f\u031c\u0318\u0326\u035fo\u0336\u0319\u0330\u0320k\xe8\u035a\u032e\u033a\u032a\u0339\u0331\u0324 \u0316t\u031d\u0355\u0333\u0323\u033b\u032a\u035eh\u033c\u0353\u0332\u0326\u0333\u0318\u0332e\u0347\u0323\u0330\u0326\u032c\u034e \u0322\u033c\u033b\u0331\u0318h\u035a\u034e\u0359\u031c\u0323\u0332\u0345i\u0326\u0332\u0323\u0330\u0324v\u033b\u034de\u033a\u032d\u0333\u032a\u0330-m\u0322i\u0345n\u0316\u033a\u031e\u0332\u032f\u0330d\u0335\u033c\u031f\u0359\u0329\u033c\u0318\u0333 \u031e\u0325\u0331\u0333\u032dr\u031b\u0317\u0318e\u0359p\u0360r\u033c\u031e\u033b\u032d\u0317e\u033a\u0320\u0323\u035fs\u0318\u0347\u0333\u034d\u031d\u0349e\u0349\u0325\u032f\u031e\u0332\u035a\u032c\u035c\u01f9\u032c\u034e\u034e\u031f\u0316\u0347\u0324t\u034d\u032c\u0324\u0353\u033c\u032d\u0358\u0345i\u032a\u0331n\u0360g\u0334\u0349 \u034f\u0349\u0345c\u032c\u031fh\u0361a\u032b\u033b\u032f\u0358o\u032b\u031f\u0316\u034d\u0319\u031d\u0349s\u0317\u0326\u0332.\u0328\u0339\u0348\u0323-products]" time="0.0010006427764892578"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x05A15D90&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[\u1e70\u033a\u033a\u0315o\u035e \u0337i\u0332\u032c\u0347\u032a\u0359n\u031d\u0317\u0355v\u031f\u031c\u0318\u0326\u035fo\u0336\u0319\u0330\u0320k\xe8\u035a\u032e\u033a\u032a\u0339\u0331\u0324 \u0316t\u031d\u0355\u0333\u0323\u033b\u032a\u035eh\u033c\u0353\u0332\u0326\u0333\u0318\u0332e\u0347\u0323\u0330\u0326\u032c\u034e \u0322\u033c\u033b\u0331\u0318h\u035a\u034e\u0359\u031c\u0323\u0332\u0345i\u0326\u0332\u0323\u0330\u0324v\u033b\u034de\u033a\u032d\u0333\u032a\u0330-m\u0322i\u0345n\u0316\u033a\u031e\u0332\u032f\u0330d\u0335\u033c\u031f\u0359\u0329\u033c\u0318\u0333 \u031e\u0325\u0331\u0333\u032dr\u031b\u0317\u0318e\u0359p\u0360r\u033c\u031e\u033b\u032d\u0317e\u033a\u0320\u0323\u035fs\u0318\u0347\u0333\u034d\u031d\u0349e\u0349\u0325\u032f\u031e\u0332\u035a\u032c\u035c\u01f9\u032c\u034e\u034e\u031f\u0316\u0347\u0324t\u034d\u032c\u0324\u0353\u033c\u032d\u0358\u0345i\u032a\u0331n\u0360g\u0334\u0349 \u034f\u0349\u0345c\u032c\u031fh\u0361a\u032b\u033b\u032f\u0358o\u032b\u031f\u0316\u034d\u0319\u031d\u0349s\u0317\u0326\u0332.\u0328\u0339\u0348\u0323-costcenters]" time="0.0"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x05A15130&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[\u1e70\u033a\u033a\u0315o\u035e \u0337i\u0332\u032c\u0347\u032a\u0359n\u031d\u0317\u0355v\u031f\u031c\u0318\u0326\u035fo\u0336\u0319\u0330\u0320k\xe8\u035a\u032e\u033a\u032a\u0339\u0331\u0324 \u0316t\u031d\u0355\u0333\u0323\u033b\u032a\u035eh\u033c\u0353\u0332\u0326\u0333\u0318\u0332e\u0347\u0323\u0330\u0326\u032c\u034e \u0322\u033c\u033b\u0331\u0318h\u035a\u034e\u0359\u031c\u0323\u0332\u0345i\u0326\u0332\u0323\u0330\u0324v\u033b\u034de\u033a\u032d\u0333\u032a\u0330-m\u0322i\u0345n\u0316\u033a\u031e\u0332\u032f\u0330d\u0335\u033c\u031f\u0359\u0329\u033c\u0318\u0333 \u031e\u0325\u0331\u0333\u032dr\u031b\u0317\u0318e\u0359p\u0360r\u033c\u031e\u033b\u032d\u0317e\u033a\u0320\u0323\u035fs\u0318\u0347\u0333\u034d\u031d\u0349e\u0349\u0325\u032f\u031e\u0332\u035a\u032c\u035c\u01f9\u032c\u034e\u034e\u031f\u0316\u0347\u0324t\u034d\u032c\u0324\u0353\u033c\u032d\u0358\u0345i\u032a\u0331n\u0360g\u0334\u0349 \u034f\u0349\u0345c\u032c\u031fh\u0361a\u032b\u033b\u032f\u0358o\u032b\u031f\u0316\u034d\u0319\u031d\u0349s\u0317\u0326\u0332.\u0328\u0339\u0348\u0323-usergroups]" time="0.0"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x05A15950&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[\u1e70\u033a\u033a\u0315o\u035e \u0337i\u0332\u032c\u0347\u032a\u0359n\u031d\u0317\u0355v\u031f\u031c\u0318\u0326\u035fo\u0336\u0319\u0330\u0320k\xe8\u035a\u032e\u033a\u032a\u0339\u0331\u0324 \u0316t\u031d\u0355\u0333\u0323\u033b\u032a\u035eh\u033c\u0353\u0332\u0326\u0333\u0318\u0332e\u0347\u0323\u0330\u0326\u032c\u034e \u0322\u033c\u033b\u0331\u0318h\u035a\u034e\u0359\u031c\u0323\u0332\u0345i\u0326\u0332\u0323\u0330\u0324v\u033b\u034de\u033a\u032d\u0333\u032a\u0330-m\u0322i\u0345n\u0316\u033a\u031e\u0332\u032f\u0330d\u0335\u033c\u031f\u0359\u0329\u033c\u0318\u0333 \u031e\u0325\u0331\u0333\u032dr\u031b\u0317\u0318e\u0359p\u0360r\u033c\u031e\u033b\u032d\u0317e\u033a\u0320\u0323\u035fs\u0318\u0347\u0333\u034d\u031d\u0349e\u0349\u0325\u032f\u031e\u0332\u035a\u032c\u035c\u01f9\u032c\u034e\u034e\u031f\u0316\u0347\u0324t\u034d\u032c\u0324\u0353\u033c\u032d\u0358\u0345i\u032a\u0331n\u0360g\u0334\u0349 \u034f\u0349\u0345c\u032c\u031fh\u0361a\u032b\u033b\u032f\u0358o\u032b\u031f\u0316\u034d\u0319\u031d\u0349s\u0317\u0326\u0332.\u0328\u0339\u0348\u0323-addresses]" time="0.0010161399841308594"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x059DF7B0&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[\u1e70\u033a\u033a\u0315o\u035e \u0337i\u0332\u032c\u0347\u032a\u0359n\u031d\u0317\u0355v\u031f\u031c\u0318\u0326\u035fo\u0336\u0319\u0330\u0320k\xe8\u035a\u032e\u033a\u032a\u0339\u0331\u0324 \u0316t\u031d\u0355\u0333\u0323\u033b\u032a\u035eh\u033c\u0353\u0332\u0326\u0333\u0318\u0332e\u0347\u0323\u0330\u0326\u032c\u034e \u0322\u033c\u033b\u0331\u0318h\u035a\u034e\u0359\u031c\u0323\u0332\u0345i\u0326\u0332\u0323\u0330\u0324v\u033b\u034de\u033a\u032d\u0333\u032a\u0330-m\u0322i\u0345n\u0316\u033a\u031e\u0332\u032f\u0330d\u0335\u033c\u031f\u0359\u0329\u033c\u0318\u0333 \u031e\u0325\u0331\u0333\u032dr\u031b\u0317\u0318e\u0359p\u0360r\u033c\u031e\u033b\u032d\u0317e\u033a\u0320\u0323\u035fs\u0318\u0347\u0333\u034d\u031d\u0349e\u0349\u0325\u032f\u031e\u0332\u035a\u032c\u035c\u01f9\u032c\u034e\u034e\u031f\u0316\u0347\u0324t\u034d\u032c\u0324\u0353\u033c\u032d\u0358\u0345i\u032a\u0331n\u0360g\u0334\u0349 \u034f\u0349\u0345c\u032c\u031fh\u0361a\u032b\u033b\u032f\u0358o\u032b\u031f\u0316\u034d\u0319\u031d\u0349s\u0317\u0326\u0332.\u0328\u0339\u0348\u0323-creditcards]" time="0.001004934310913086"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x05A15310&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[\u1e70\u033a\u033a\u0315o\u035e \u0337i\u0332\u032c\u0347\u032a\u0359n\u031d\u0317\u0355v\u031f\u031c\u0318\u0326\u035fo\u0336\u0319\u0330\u0320k\xe8\u035a\u032e\u033a\u032a\u0339\u0331\u0324 \u0316t\u031d\u0355\u0333\u0323\u033b\u032a\u035eh\u033c\u0353\u0332\u0326\u0333\u0318\u0332e\u0347\u0323\u0330\u0326\u032c\u034e \u0322\u033c\u033b\u0331\u0318h\u035a\u034e\u0359\u031c\u0323\u0332\u0345i\u0326\u0332\u0323\u0330\u0324v\u033b\u034de\u033a\u032d\u0333\u032a\u0330-m\u0322i\u0345n\u0316\u033a\u031e\u0332\u032f\u0330d\u0335\u033c\u031f\u0359\u0329\u033c\u0318\u0333 \u031e\u0325\u0331\u0333\u032dr\u031b\u0317\u0318e\u0359p\u0360r\u033c\u031e\u033b\u032d\u0317e\u033a\u0320\u0323\u035fs\u0318\u0347\u0333\u034d\u031d\u0349e\u0349\u0325\u032f\u031e\u0332\u035a\u032c\u035c\u01f9\u032c\u034e\u034e\u031f\u0316\u0347\u0324t\u034d\u032c\u0324\u0353\u033c\u032d\u0358\u0345i\u032a\u0331n\u0360g\u0334\u0349 \u034f\u0349\u0345c\u032c\u031fh\u0361a\u032b\u033b\u032f\u0358o\u032b\u031f\u0316\u034d\u0319\u031d\u0349s\u0317\u0326\u0332.\u0328\u0339\u0348\u0323-categories]" time="0.0009980201721191406"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x05A15DB0&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[\u1e70\u033a\u033a\u0315o\u035e \u0337i\u0332\u032c\u0347\u032a\u0359n\u031d\u0317\u0355v\u031f\u031c\u0318\u0326\u035fo\u0336\u0319\u0330\u0320k\xe8\u035a\u032e\u033a\u032a\u0339\u0331\u0324 \u0316t\u031d\u0355\u0333\u0323\u033b\u032a\u035eh\u033c\u0353\u0332\u0326\u0333\u0318\u0332e\u0347\u0323\u0330\u0326\u032c\u034e \u0322\u033c\u033b\u0331\u0318h\u035a\u034e\u0359\u031c\u0323\u0332\u0345i\u0326\u0332\u0323\u0330\u0324v\u033b\u034de\u033a\u032d\u0333\u032a\u0330-m\u0322i\u0345n\u0316\u033a\u031e\u0332\u032f\u0330d\u0335\u033c\u031f\u0359\u0329\u033c\u0318\u0333 \u031e\u0325\u0331\u0333\u032dr\u031b\u0317\u0318e\u0359p\u0360r\u033c\u031e\u033b\u032d\u0317e\u033a\u0320\u0323\u035fs\u0318\u0347\u0333\u034d\u031d\u0349e\u0349\u0325\u032f\u031e\u0332\u035a\u032c\u035c\u01f9\u032c\u034e\u034e\u031f\u0316\u0347\u0324t\u034d\u032c\u0324\u0353\u033c\u032d\u0358\u0345i\u032a\u0331n\u0360g\u0334\u0349 \u034f\u0349\u0345c\u032c\u031fh\u0361a\u032b\u033b\u032f\u0358o\u032b\u031f\u0316\u034d\u0319\u031d\u0349s\u0317\u0326\u0332.\u0328\u0339\u0348\u0323-orders]" time="0.0010020732879638672"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x05A01070&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[\u1e70\u033a\u033a\u0315o\u035e \u0337i\u0332\u032c\u0347\u032a\u0359n\u031d\u0317\u0355v\u031f\u031c\u0318\u0326\u035fo\u0336\u0319\u0330\u0320k\xe8\u035a\u032e\u033a\u032a\u0339\u0331\u0324 \u0316t\u031d\u0355\u0333\u0323\u033b\u032a\u035eh\u033c\u0353\u0332\u0326\u0333\u0318\u0332e\u0347\u0323\u0330\u0326\u032c\u034e \u0322\u033c\u033b\u0331\u0318h\u035a\u034e\u0359\u031c\u0323\u0332\u0345i\u0326\u0332\u0323\u0330\u0324v\u033b\u034de\u033a\u032d\u0333\u032a\u0330-m\u0322i\u0345n\u0316\u033a\u031e\u0332\u032f\u0330d\u0335\u033c\u031f\u0359\u0329\u033c\u0318\u0333 \u031e\u0325\u0331\u0333\u032dr\u031b\u0317\u0318e\u0359p\u0360r\u033c\u031e\u033b\u032d\u0317e\u033a\u0320\u0323\u035fs\u0318\u0347\u0333\u034d\u031d\u0349e\u0349\u0325\u032f\u031e\u0332\u035a\u032c\u035c\u01f9\u032c\u034e\u034e\u031f\u0316\u0347\u0324t\u034d\u032c\u0324\u0353\u033c\u032d\u0358\u0345i\u032a\u0331n\u0360g\u0334\u0349 \u034f\u0349\u0345c\u032c\u031fh\u0361a\u032b\u033b\u032f\u0358o\u032b\u031f\u0316\u034d\u0319\u031d\u0349s\u0317\u0326\u0332.\u0328\u0339\u0348\u0323-promotions]" time="0.0009999275207519531"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x05A17130&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[\u1e70\u033a\u033a\u0315o\u035e \u0337i\u0332\u032c\u0347\u032a\u0359n\u031d\u0317\u0355v\u031f\u031c\u0318\u0326\u035fo\u0336\u0319\u0330\u0320k\xe8\u035a\u032e\u033a\u032a\u0339\u0331\u0324 \u0316t\u031d\u0355\u0333\u0323\u033b\u032a\u035eh\u033c\u0353\u0332\u0326\u0333\u0318\u0332e\u0347\u0323\u0330\u0326\u032c\u034e \u0322\u033c\u033b\u0331\u0318h\u035a\u034e\u0359\u031c\u0323\u0332\u0345i\u0326\u0332\u0323\u0330\u0324v\u033b\u034de\u033a\u032d\u0333\u032a\u0330-m\u0322i\u0345n\u0316\u033a\u031e\u0332\u032f\u0330d\u0335\u033c\u031f\u0359\u0329\u033c\u0318\u0333 \u031e\u0325\u0331\u0333\u032dr\u031b\u0317\u0318e\u0359p\u0360r\u033c\u031e\u033b\u032d\u0317e\u033a\u0320\u0323\u035fs\u0318\u0347\u0333\u034d\u031d\u0349e\u0349\u0325\u032f\u031e\u0332\u035a\u032c\u035c\u01f9\u032c\u034e\u034e\u031f\u0316\u0347\u0324t\u034d\u032c\u0324\u0353\u033c\u032d\u0358\u0345i\u032a\u0331n\u0360g\u0334\u0349 \u034f\u0349\u0345c\u032c\u031fh\u0361a\u032b\u033b\u032f\u0358o\u032b\u031f\u0316\u034d\u0319\u031d\u0349s\u0317\u0326\u0332.\u0328\u0339\u0348\u0323-spendingAccounts]" time="0.0"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x059FC910&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[\u1e70\u033a\u033a\u0315o\u035e \u0337i\u0332\u032c\u0347\u032a\u0359n\u031d\u0317\u0355v\u031f\u031c\u0318\u0326\u035fo\u0336\u0319\u0330\u0320k\xe8\u035a\u032e\u033a\u032a\u0339\u0331\u0324 \u0316t\u031d\u0355\u0333\u0323\u033b\u032a\u035eh\u033c\u0353\u0332\u0326\u0333\u0318\u0332e\u0347\u0323\u0330\u0326\u032c\u034e \u0322\u033c\u033b\u0331\u0318h\u035a\u034e\u0359\u031c\u0323\u0332\u0345i\u0326\u0332\u0323\u0330\u0324v\u033b\u034de\u033a\u032d\u0333\u032a\u0330-m\u0322i\u0345n\u0316\u033a\u031e\u0332\u032f\u0330d\u0335\u033c\u031f\u0359\u0329\u033c\u0318\u0333 \u031e\u0325\u0331\u0333\u032dr\u031b\u0317\u0318e\u0359p\u0360r\u033c\u031e\u033b\u032d\u0317e\u033a\u0320\u0323\u035fs\u0318\u0347\u0333\u034d\u031d\u0349e\u0349\u0325\u032f\u031e\u0332\u035a\u032c\u035c\u01f9\u032c\u034e\u034e\u031f\u0316\u0347\u0324t\u034d\u032c\u0324\u0353\u033c\u032d\u0358\u0345i\u032a\u0331n\u0360g\u0334\u0349 \u034f\u0349\u0345c\u032c\u031fh\u0361a\u032b\u033b\u032f\u0358o\u032b\u031f\u0316\u034d\u0319\u031d\u0349s\u0317\u0326\u0332.\u0328\u0339\u0348\u0323-shipments]" time="0.0010018348693847656"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x05A17290&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[\u1e70\u033a\u033a\u0315o\u035e \u0337i\u0332\u032c\u0347\u032a\u0359n\u031d\u0317\u0355v\u031f\u031c\u0318\u0326\u035fo\u0336\u0319\u0330\u0320k\xe8\u035a\u032e\u033a\u032a\u0339\u0331\u0324 \u0316t\u031d\u0355\u0333\u0323\u033b\u032a\u035eh\u033c\u0353\u0332\u0326\u0333\u0318\u0332e\u0347\u0323\u0330\u0326\u032c\u034e \u0322\u033c\u033b\u0331\u0318h\u035a\u034e\u0359\u031c\u0323\u0332\u0345i\u0326\u0332\u0323\u0330\u0324v\u033b\u034de\u033a\u032d\u0333\u032a\u0330-m\u0322i\u0345n\u0316\u033a\u031e\u0332\u032f\u0330d\u0335\u033c\u031f\u0359\u0329\u033c\u0318\u0333 \u031e\u0325\u0331\u0333\u032dr\u031b\u0317\u0318e\u0359p\u0360r\u033c\u031e\u033b\u032d\u0317e\u033a\u0320\u0323\u035fs\u0318\u0347\u0333\u034d\u031d\u0349e\u0349\u0325\u032f\u031e\u0332\u035a\u032c\u035c\u01f9\u032c\u034e\u034e\u031f\u0316\u0347\u0324t\u034d\u032c\u0324\u0353\u033c\u032d\u0358\u0345i\u032a\u0331n\u0360g\u0334\u0349 \u034f\u0349\u0345c\u032c\u031fh\u0361a\u032b\u033b\u032f\u0358o\u032b\u031f\u0316\u034d\u0319\u031d\u0349s\u0317\u0326\u0332.\u0328\u0339\u0348\u0323-catalogs]" time="0.0020020008087158203"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x05A177D0&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[&quot;`&apos;&gt;&lt;script&gt;\\xE2\\x80\\x85javascript:alert(1)&lt;/script&gt;]" time="0.0010004043579101562"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x05A176F0&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[&quot;`&apos;&gt;&lt;script&gt;\\xE2\\x80\\x85javascript:alert(1)&lt;/script&gt;-products]" time="0.0009989738464355469"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x059906B0&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[&quot;`&apos;&gt;&lt;script&gt;\\xE2\\x80\\x85javascript:alert(1)&lt;/script&gt;-costcenters]" time="0.002003908157348633"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x05A15F10&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[&quot;`&apos;&gt;&lt;script&gt;\\xE2\\x80\\x85javascript:alert(1)&lt;/script&gt;-usergroups]" time="0.0010013580322265625"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x058F10B0&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[&quot;`&apos;&gt;&lt;script&gt;\\xE2\\x80\\x85javascript:alert(1)&lt;/script&gt;-addresses]" time="0.0"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x058F14F0&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[&quot;`&apos;&gt;&lt;script&gt;\\xE2\\x80\\x85javascript:alert(1)&lt;/script&gt;-creditcards]" time="0.0"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x05A15F70&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[&quot;`&apos;&gt;&lt;script&gt;\\xE2\\x80\\x85javascript:alert(1)&lt;/script&gt;-categories]" time="0.0"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x058EE410&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[&quot;`&apos;&gt;&lt;script&gt;\\xE2\\x80\\x85javascript:alert(1)&lt;/script&gt;-orders]" time="0.0"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x05A179D0&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[&quot;`&apos;&gt;&lt;script&gt;\\xE2\\x80\\x85javascript:alert(1)&lt;/script&gt;-promotions]" time="0.0009982585906982422"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x05A178D0&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[&quot;`&apos;&gt;&lt;script&gt;\\xE2\\x80\\x85javascript:alert(1)&lt;/script&gt;-spendingAccounts]" time="0.0010018348693847656"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x059FCFB0&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[&quot;`&apos;&gt;&lt;script&gt;\\xE2\\x80\\x85javascript:alert(1)&lt;/script&gt;-shipments]" time="0.0010027885437011719"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x058F1450&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[&quot;`&apos;&gt;&lt;script&gt;\\xE2\\x80\\x85javascript:alert(1)&lt;/script&gt;-catalogs]" time="0.0010037422180175781"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x058F1A50&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[\u2080\u2081\u2082]" time="0.0"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x058F1E90&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[\u2080\u2081\u2082-products]" time="0.0"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x058F1D30&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[\u2080\u2081\u2082-costcenters]" time="0.002003192901611328"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x058F1170&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[\u2080\u2081\u2082-usergroups]" time="0.0010018348693847656"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x05A17F30&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[\u2080\u2081\u2082-addresses]" time="0.0020105838775634766"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x05A17910&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[\u2080\u2081\u2082-creditcards]" time="0.0009984970092773438"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x058EEA70&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[\u2080\u2081\u2082-categories]" time="0.0"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x05A15C30&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[\u2080\u2081\u2082-orders]" time="0.001001119613647461"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x05A31410&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[\u2080\u2081\u2082-promotions]" time="0.0"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x05A31850&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[\u2080\u2081\u2082-spendingAccounts]" time="0.0"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x05A151F0&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[\u2080\u2081\u2082-shipments]" time="0.0009999275207519531"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x05A17330&gt;</skipped></testcase><testcase classname="test_base" file="test_base.py" line="102" name="test_blns_endpoints[\u2080\u2081\u2082-catalogs]" time="0.0"><skipped message="unconditional skip" type="pytest.skip">test_base.py:102: &lt;py._xmlgen.raw object at 0x05A170D0&gt;</skipped></testcase><testcase classname="test_dataCleanup" file="test_dataCleanup.py" line="21" name="test_CleanUpData" time="0.6817264556884766"></testcase><testcase classname="test_search" file="test_search.py" line="21" name="test_NoFacetsReturnedForNonFacetLists[products]" time="0.20103812217712402"></testcase><testcase classname="test_search" file="test_search.py" line="45" name="test_FacetsReturnedForFacetLists[products]" time="0.12443113327026367"></testcase><testcase classname="test_search" file="test_search.py" line="63" name="test_NoAccessForNonFacetOrgs" time="0.11828970909118652"></testcase><testcase classname="test_search" file="test_search.py" line="77" name="test_FuzzySearch[data]" time="0.0"><skipped message="needs adjusted to handle misspellings better" type="pytest.skip">test_search.py:77: &lt;py._xmlgen.raw object at 0x058EE8F0&gt;</skipped></testcase><testcase classname="test_search" file="test_search.py" line="77" name="test_FuzzySearch[datas]" time="0.0"><skipped message="needs adjusted to handle misspellings better" type="pytest.skip">test_search.py:77: &lt;py._xmlgen.raw object at 0x05A319F0&gt;</skipped></testcase><testcase classname="test_search" file="test_search.py" line="77" name="test_FuzzySearch[particular]" time="0.0"><skipped message="needs adjusted to handle misspellings better" type="pytest.skip">test_search.py:77: &lt;py._xmlgen.raw object at 0x05A31F10&gt;</skipped></testcase><testcase classname="test_search" file="test_search.py" line="77" name="test_FuzzySearch[partikular]" time="0.0009944438934326172"><skipped message="needs adjusted to handle misspellings better" type="pytest.skip">test_search.py:77: &lt;py._xmlgen.raw object at 0x05A31750&gt;</skipped></testcase><testcase classname="test_search" file="test_search.py" line="77" name="test_FuzzySearch[sentences]" time="0.00099945068359375"><skipped message="needs adjusted to handle misspellings better" type="pytest.skip">test_search.py:77: &lt;py._xmlgen.raw object at 0x058F7390&gt;</skipped></testcase><testcase classname="test_search" file="test_search.py" line="77" name="test_FuzzySearch[sentances]" time="0.0"><skipped message="needs adjusted to handle misspellings better" type="pytest.skip">test_search.py:77: &lt;py._xmlgen.raw object at 0x058F77D0&gt;</skipped></testcase><testcase classname="test_search" file="test_search.py" line="123" name="test_XPAlias" time="0.3427422046661377"><failure message="NameError: name &apos;fuzzy&apos; is not defined">configInfo = &lt;Section: PROD-CONFIG&gt;
connections = {&apos;admin&apos;: &lt;requests.sessions.Session object at 0x05990650&gt;, &apos;anon&apos;: &lt;requests.sessions.Session object at 0x059C1CD0&gt;, &apos;buyer&apos;: &lt;requests.sessions.Session object at 0x05990730&gt;}

    def test_XPAlias(configInfo, connections):
    
        #/me/products?search=data&amp;searchOn=Description
    
        noalias = connections[&apos;buyer&apos;].get(configInfo[&apos;API&apos;] + &apos;v1/me/products&apos;,
                                           params={&apos;searchOn&apos;: &apos;xp=*&apos;, &apos;search&apos;: &apos;&apos;, &apos;pageSize&apos;: 100})
        assert noalias.status_code is codes.ok
    
        alias = connections[&apos;buyer&apos;].get(configInfo[&apos;API&apos;] + &apos;v1/me/products&apos;,
                                         params={&apos;searchOn&apos;: &apos;xp&apos;, &apos;search&apos;: &apos;&apos;, &apos;pageSize&apos;: 100})
        assert alias.status_code is codes.ok
&gt;       log.info(json.dumps(fuzzy.json(), indent=4))
E       NameError: name &apos;fuzzy&apos; is not defined

panoptes\test_search.py:135: NameError</failure></testcase><testcase classname="auth.test_auth" file="auth\test_auth.py" line="26" name="test_usernamePasswordGrant" time="0.6492798328399658"></testcase><testcase classname="auth.test_auth" file="auth\test_auth.py" line="46" name="test_anonGrant" time="0.6141064167022705"></testcase><testcase classname="auth.test_auth" file="auth\test_auth.py" line="65" name="test_clientCredentialsGrant" time="0.6622629165649414"></testcase><testcase classname="auth.test_auth" file="auth\test_auth.py" line="82" name="test_updatePriceSchedules" time="0.0"><skipped message="unconditional skip" type="pytest.skip">auth\test_auth.py:82: &lt;py._xmlgen.raw object at 0x062986B0&gt;</skipped></testcase><testcase classname="auth.test_auth" file="auth\test_auth.py" line="140" name="test_anonOrderNotFound" time="1.630507230758667"></testcase><testcase classname="integrations.test_authdotnet" file="integrations\test_authdotnet.py" line="22" name="test_createCardNewUser" time="1.5830564498901367"></testcase><testcase classname="integrations.test_authdotnet" file="integrations\test_authdotnet.py" line="73" name="test_createCardExistingUser" time="1.6013567447662354"></testcase><testcase classname="integrations.test_messageSenders" file="integrations\test_messageSenders.py" line="39" name="test_ForgottenPassword" time="4.338181495666504"></testcase><testcase classname="integrations.test_messageSenders" file="integrations\test_messageSenders.py" line="111" name="test_NewUserInvitedRegister" time="0.0010001659393310547"><skipped message="unconditional skip" type="pytest.skip">integrations\test_messageSenders.py:111: &lt;py._xmlgen.raw object at 0x06299A10&gt;</skipped></testcase><testcase classname="integrations.test_messageSenders" file="integrations\test_messageSenders.py" line="152" name="test_NewUserInvitedCreated" time="0.0"><skipped message="unconditional skip" type="pytest.skip">integrations\test_messageSenders.py:152: &lt;py._xmlgen.raw object at 0x058F7C30&gt;</skipped></testcase><testcase classname="integrations.test_messageSenders" file="integrations\test_messageSenders.py" line="185" name="test_OrderSubmitted" time="4.273308277130127"></testcase><testcase classname="integrations.test_messageSenders" file="integrations\test_messageSenders.py" line="321" name="test_ShipmentCreated" time="0.005150556564331055"></testcase><testcase classname="integrations.test_messageSenders" file="integrations\test_messageSenders.py" line="336" name="test_OrderApproved" time="0.0010051727294921875"></testcase><testcase classname="integrations.test_messageSenders" file="integrations\test_messageSenders.py" line="346" name="test_OrderDeclined" time="0.0019686222076416016"></testcase><testcase classname="integrations.test_messageSenders" file="integrations\test_messageSenders.py" line="356" name="test_OrderSubmittedForApproval" time="0.0029954910278320312"></testcase><testcase classname="integrations.test_messageSenders" file="integrations\test_messageSenders.py" line="366" name="test_OrderSubmittedForYourApprovalHasBeenApproved" time="0.003953695297241211"></testcase><testcase classname="integrations.test_messageSenders" file="integrations\test_messageSenders.py" line="374" name="test_OrderSubmittedForYourApprovalHasBeenDeclined" time="0.001001596450805664"></testcase><testcase classname="me.test_me" file="me\test_me.py" line="63" name="test_meAddressesCreate" time="0.8921370506286621"></testcase><testcase classname="me.test_me" file="me\test_me.py" line="109" name="test_meAddressesDelete" time="0.8646893501281738"></testcase><testcase classname="me.test_me" file="me\test_me.py" line="158" name="test_meRegistration" time="0.6410055160522461"></testcase><testcase classname="me.test_me" file="me\test_me.py" line="198" name="test_me_gets[buyer]" time="0.10057783126831055"></testcase><testcase classname="me.test_me" file="me\test_me.py" line="198" name="test_me_gets[anon]" time="0.09075284004211426"></testcase><testcase classname="me.test_me" file="me\test_me.py" line="198" name="test_me_gets[products-buyer]" time="0.12149810791015625"></testcase><testcase classname="me.test_me" file="me\test_me.py" line="198" name="test_me_gets[products-anon]" time="0.14754152297973633"></testcase><testcase classname="me.test_me" file="me\test_me.py" line="198" name="test_me_gets[costcenters-buyer]" time="0.08365583419799805"></testcase><testcase classname="me.test_me" file="me\test_me.py" line="198" name="test_me_gets[costcenters-anon]" time="0.08689475059509277"></testcase><testcase classname="me.test_me" file="me\test_me.py" line="198" name="test_me_gets[usergroups-buyer]" time="0.09842133522033691"></testcase><testcase classname="me.test_me" file="me\test_me.py" line="198" name="test_me_gets[usergroups-anon]" time="0.09612894058227539"></testcase><testcase classname="me.test_me" file="me\test_me.py" line="198" name="test_me_gets[addresses-buyer]" time="0.0974740982055664"></testcase><testcase classname="me.test_me" file="me\test_me.py" line="198" name="test_me_gets[addresses-anon]" time="0.08722925186157227"></testcase><testcase classname="me.test_me" file="me\test_me.py" line="198" name="test_me_gets[creditcards-buyer]" time="0.08860254287719727"></testcase><testcase classname="me.test_me" file="me\test_me.py" line="198" name="test_me_gets[creditcards-anon]" time="0.0978851318359375"></testcase><testcase classname="me.test_me" file="me\test_me.py" line="198" name="test_me_gets[categories-buyer]" time="0.10219979286193848"></testcase><testcase classname="me.test_me" file="me\test_me.py" line="198" name="test_me_gets[categories-anon]" time="0.13324785232543945"></testcase><testcase classname="me.test_me" file="me\test_me.py" line="198" name="test_me_gets[orders-buyer]" time="0.12010693550109863"></testcase><testcase classname="me.test_me" file="me\test_me.py" line="198" name="test_me_gets[orders-anon]" time="0.09319710731506348"></testcase><testcase classname="me.test_me" file="me\test_me.py" line="198" name="test_me_gets[promotions-buyer]" time="0.09636831283569336"></testcase><testcase classname="me.test_me" file="me\test_me.py" line="198" name="test_me_gets[promotions-anon]" time="0.09088659286499023"></testcase><testcase classname="me.test_me" file="me\test_me.py" line="198" name="test_me_gets[spendingAccounts-buyer]" time="0.08925056457519531"></testcase><testcase classname="me.test_me" file="me\test_me.py" line="198" name="test_me_gets[spendingAccounts-anon]" time="0.09349822998046875"></testcase><testcase classname="me.test_me" file="me\test_me.py" line="198" name="test_me_gets[shipments-buyer]" time="0.1058034896850586"></testcase><testcase classname="me.test_me" file="me\test_me.py" line="198" name="test_me_gets[shipments-anon]" time="0.10821652412414551"></testcase><testcase classname="me.test_me" file="me\test_me.py" line="198" name="test_me_gets[catalogs-buyer]" time="0.09893083572387695"></testcase><testcase classname="me.test_me" file="me\test_me.py" line="198" name="test_me_gets[catalogs-anon]" time="0.08978962898254395"></testcase><testcase classname="me.test_me" file="me\test_me.py" line="232" name="test_me_facets[buyer]" time="0.13576340675354004"></testcase><testcase classname="me.test_me" file="me\test_me.py" line="232" name="test_me_facets[anon]" time="0.1329331398010254"></testcase><testcase classname="productFacets.test_facets" file="productFacets\test_facets.py" line="27" name="test_verifyMinCount1[True]" time="100.73996877670288"><failure message="AssertionError">configInfo = &lt;Section: PROD-CONFIG&gt;
connections = {&apos;admin&apos;: &lt;requests.sessions.Session object at 0x05990650&gt;, &apos;anon&apos;: &lt;requests.sessions.Session object at 0x059C1CD0&gt;, &apos;buyer&apos;: &lt;requests.sessions.Session object at 0x05990730&gt;}
nested = True

    @pytest.mark.parametrize(&apos;nested&apos;, [True, False])
    @pytest.mark.description(&apos;A Facet\&apos;s Min Count controls how many **VALUES** must exist for that facet before the facet will show up in the Facet Meta. Min Count = 1&apos;)
    def test_verifyMinCount1(configInfo, connections, nested):
    
        admin = connections[&apos;admin&apos;]
        buyer = connections[&apos;buyer&apos;]
    
        #----------------------------#
    
&gt;       newFacet = makeFacetAndAssignValues(configInfo, buyer, admin, nested, 1, 1)

panoptes\productFacets\test_facets.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

configInfo = &lt;Section: PROD-CONFIG&gt;
buyer = &lt;requests.sessions.Session object at 0x05990730&gt;
admin = &lt;requests.sessions.Session object at 0x05990650&gt;, nested = True
minCount = 1, numValues = 1

    def makeFacetAndAssignValues(configInfo, buyer, admin, nested, minCount, numValues):
    
        # get the products to assign facet values to...
    
        if numValues &gt; 20:
            pageSize = numValues
        else:
            pageSize = 20
    
        # get some products to assign values to
        buyerProducts = buyer.get(
            configInfo[&apos;API&apos;] + &apos;v1/me/products&apos;, params={&apos;PageSize&apos;: pageSize})
        assert buyerProducts.status_code is codes.ok
    
        randomPick = random.randrange(0, pageSize - 1)
        randomProducts = random.choices(buyerProducts.json()[&apos;Items&apos;], k=numValues)
        # log.info(randomProducts)
    
        # make that facet
        newFacet = makeAFacet(configInfo, admin, nested, minCount)
    
        # check to see if the facet shows up in the meta facet
        facetList = buyer.get(configInfo[&apos;API&apos;] + &apos;v1/me/products&apos;)
    
        # values should only show up if minCount = 0 here, because no values yet
        facetNames = []
        for each in facetList.json()[&apos;Meta&apos;][&apos;Facets&apos;]:
            facetNames.append(each[&apos;Name&apos;])
        log.info(facetNames)
        #log.info(&apos;wait for the product index...&apos;)
        # time.sleep(60)
        if minCount &gt; 0:
            assert newFacet[&apos;Name&apos;] not in facetNames
        elif minCount == 0:
            assert newFacet[&apos;Name&apos;] not in facetNames
    
        # let&apos;s assign some values
    
        valueOptions = [True, False, fake.catch_phrase(), random.choice(blns.list)]
        # add a value
        for each in randomProducts:
            facetValue = assignProductFacet(
                configInfo, admin, productID=each[&apos;ID&apos;], facetPath=newFacet[&apos;XpPath&apos;], value=random.choice(valueOptions))
    
        log.info(&apos;wait for the product index...&apos;)
        time.sleep(100)
    
        facetNames = []
        for each in facetList.json()[&apos;Meta&apos;][&apos;Facets&apos;]:
            facetNames.append(each[&apos;Name&apos;])
    
        log.info(facetNames)
        if minCount &gt;= 0:
&gt;           assert newFacet[&apos;Name&apos;] in facetNames
E           AssertionError

panoptes\productFacets\__init__.py:212: AssertionError</failure></testcase><testcase classname="productFacets.test_facets" file="productFacets\test_facets.py" line="27" name="test_verifyMinCount1[False]" time="101.46851229667664"><failure message="AssertionError">configInfo = &lt;Section: PROD-CONFIG&gt;
connections = {&apos;admin&apos;: &lt;requests.sessions.Session object at 0x05990650&gt;, &apos;anon&apos;: &lt;requests.sessions.Session object at 0x059C1CD0&gt;, &apos;buyer&apos;: &lt;requests.sessions.Session object at 0x05990730&gt;}
nested = False

    @pytest.mark.parametrize(&apos;nested&apos;, [True, False])
    @pytest.mark.description(&apos;A Facet\&apos;s Min Count controls how many **VALUES** must exist for that facet before the facet will show up in the Facet Meta. Min Count = 1&apos;)
    def test_verifyMinCount1(configInfo, connections, nested):
    
        admin = connections[&apos;admin&apos;]
        buyer = connections[&apos;buyer&apos;]
    
        #----------------------------#
    
&gt;       newFacet = makeFacetAndAssignValues(configInfo, buyer, admin, nested, 1, 1)

panoptes\productFacets\test_facets.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

configInfo = &lt;Section: PROD-CONFIG&gt;
buyer = &lt;requests.sessions.Session object at 0x05990730&gt;
admin = &lt;requests.sessions.Session object at 0x05990650&gt;, nested = False
minCount = 1, numValues = 1

    def makeFacetAndAssignValues(configInfo, buyer, admin, nested, minCount, numValues):
    
        # get the products to assign facet values to...
    
        if numValues &gt; 20:
            pageSize = numValues
        else:
            pageSize = 20
    
        # get some products to assign values to
        buyerProducts = buyer.get(
            configInfo[&apos;API&apos;] + &apos;v1/me/products&apos;, params={&apos;PageSize&apos;: pageSize})
        assert buyerProducts.status_code is codes.ok
    
        randomPick = random.randrange(0, pageSize - 1)
        randomProducts = random.choices(buyerProducts.json()[&apos;Items&apos;], k=numValues)
        # log.info(randomProducts)
    
        # make that facet
        newFacet = makeAFacet(configInfo, admin, nested, minCount)
    
        # check to see if the facet shows up in the meta facet
        facetList = buyer.get(configInfo[&apos;API&apos;] + &apos;v1/me/products&apos;)
    
        # values should only show up if minCount = 0 here, because no values yet
        facetNames = []
        for each in facetList.json()[&apos;Meta&apos;][&apos;Facets&apos;]:
            facetNames.append(each[&apos;Name&apos;])
        log.info(facetNames)
        #log.info(&apos;wait for the product index...&apos;)
        # time.sleep(60)
        if minCount &gt; 0:
            assert newFacet[&apos;Name&apos;] not in facetNames
        elif minCount == 0:
            assert newFacet[&apos;Name&apos;] not in facetNames
    
        # let&apos;s assign some values
    
        valueOptions = [True, False, fake.catch_phrase(), random.choice(blns.list)]
        # add a value
        for each in randomProducts:
            facetValue = assignProductFacet(
                configInfo, admin, productID=each[&apos;ID&apos;], facetPath=newFacet[&apos;XpPath&apos;], value=random.choice(valueOptions))
    
        log.info(&apos;wait for the product index...&apos;)
        time.sleep(100)
    
        facetNames = []
        for each in facetList.json()[&apos;Meta&apos;][&apos;Facets&apos;]:
            facetNames.append(each[&apos;Name&apos;])
    
        log.info(facetNames)
        if minCount &gt;= 0:
&gt;           assert newFacet[&apos;Name&apos;] in facetNames
E           AssertionError

panoptes\productFacets\__init__.py:212: AssertionError</failure></testcase><testcase classname="productFacets.test_facets" file="productFacets\test_facets.py" line="41" name="test_verifyMinCount0" time="101.2689471244812"><failure message="AssertionError">configInfo = &lt;Section: PROD-CONFIG&gt;
connections = {&apos;admin&apos;: &lt;requests.sessions.Session object at 0x05990650&gt;, &apos;anon&apos;: &lt;requests.sessions.Session object at 0x059C1CD0&gt;, &apos;buyer&apos;: &lt;requests.sessions.Session object at 0x05990730&gt;}

    def test_verifyMinCount0(configInfo, connections):
    
        admin = connections[&apos;admin&apos;]
        buyer = connections[&apos;buyer&apos;]
    
        #----------------------------#
    
&gt;       newFacet = makeFacetAndAssignValues(configInfo, buyer, admin, None, 0, 0)

panoptes\productFacets\test_facets.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

configInfo = &lt;Section: PROD-CONFIG&gt;
buyer = &lt;requests.sessions.Session object at 0x05990730&gt;
admin = &lt;requests.sessions.Session object at 0x05990650&gt;, nested = None
minCount = 0, numValues = 0

    def makeFacetAndAssignValues(configInfo, buyer, admin, nested, minCount, numValues):
    
        # get the products to assign facet values to...
    
        if numValues &gt; 20:
            pageSize = numValues
        else:
            pageSize = 20
    
        # get some products to assign values to
        buyerProducts = buyer.get(
            configInfo[&apos;API&apos;] + &apos;v1/me/products&apos;, params={&apos;PageSize&apos;: pageSize})
        assert buyerProducts.status_code is codes.ok
    
        randomPick = random.randrange(0, pageSize - 1)
        randomProducts = random.choices(buyerProducts.json()[&apos;Items&apos;], k=numValues)
        # log.info(randomProducts)
    
        # make that facet
        newFacet = makeAFacet(configInfo, admin, nested, minCount)
    
        # check to see if the facet shows up in the meta facet
        facetList = buyer.get(configInfo[&apos;API&apos;] + &apos;v1/me/products&apos;)
    
        # values should only show up if minCount = 0 here, because no values yet
        facetNames = []
        for each in facetList.json()[&apos;Meta&apos;][&apos;Facets&apos;]:
            facetNames.append(each[&apos;Name&apos;])
        log.info(facetNames)
        #log.info(&apos;wait for the product index...&apos;)
        # time.sleep(60)
        if minCount &gt; 0:
            assert newFacet[&apos;Name&apos;] not in facetNames
        elif minCount == 0:
            assert newFacet[&apos;Name&apos;] not in facetNames
    
        # let&apos;s assign some values
    
        valueOptions = [True, False, fake.catch_phrase(), random.choice(blns.list)]
        # add a value
        for each in randomProducts:
            facetValue = assignProductFacet(
                configInfo, admin, productID=each[&apos;ID&apos;], facetPath=newFacet[&apos;XpPath&apos;], value=random.choice(valueOptions))
    
        log.info(&apos;wait for the product index...&apos;)
        time.sleep(100)
    
        facetNames = []
        for each in facetList.json()[&apos;Meta&apos;][&apos;Facets&apos;]:
            facetNames.append(each[&apos;Name&apos;])
    
        log.info(facetNames)
        if minCount &gt;= 0:
&gt;           assert newFacet[&apos;Name&apos;] in facetNames
E           AssertionError

panoptes\productFacets\__init__.py:212: AssertionError</failure></testcase><testcase classname="productFacets.test_facets" file="productFacets\test_facets.py" line="54" name="test_deletion" time="0.001001119613647461"></testcase><testcase classname="productFacets.test_facets" file="productFacets\test_facets.py" line="58" name="test_normal" time="0.0010364055633544922"></testcase><testcase classname="productFacets.test_facets" file="productFacets\test_facets.py" line="62" name="test_facetCreation" time="0.002004384994506836"></testcase><testcase classname="products.test_products" file="products\test_products.py" line="14" name="test_xpDateFilter" time="0.16736149787902832"></testcase><testcase classname="suppliers.test_suppliers" file="suppliers\test_suppliers.py" line="25" name="test_supplierOrderCreated" time="0.00997018814086914"><skipped message="unconditional skip" type="pytest.skip">suppliers\test_suppliers.py:25: &lt;py._xmlgen.raw object at 0x062D1D90&gt;</skipped></testcase></testsuite>